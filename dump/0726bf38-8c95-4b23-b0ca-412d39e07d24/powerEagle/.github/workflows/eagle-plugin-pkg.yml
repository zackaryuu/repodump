name: Flexible Eagle Plugin Package

# Branch Filtering Documentation
# ----------------------------
# The workflow filters branches in the following way:
# 1. If pkgRules.json exists and has a 'branches' field:
#    - Only allows branches that match patterns in the branches array
#    - Supports wildcard patterns (e.g., "feature/*", "release/*")
#    - Patterns are converted to regex (e.g., "feature/*" becomes "feature/.*")
# 2. If pkgRules.json exists but has no 'branches' field:
#    - Only allows the 'main' branch
# 3. If pkgRules.json doesn't exist:
#    - Only allows the 'main' branch
#
# Example pkgRules.json with branch filtering:
# {
#   "branches": ["main", "release/*", "feature/*"],
#   "includes": ["manifest.json", "src/*"]
# }

on:
  push:
    paths:
      - 'manifest.json'
      - '.github/configs/pkgRules.json'
  workflow_dispatch:

permissions:
  contents: write 

env:
  PATH_TO_PACKAGE: "."

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: Check allowed branches
      id: check_branches
      run: |
        # Read pkgRules.json
        if [ -f ".github/configs/pkgRules.json" ]; then
          # Check if branches field exists
          if jq -e '.branches' .github/configs/pkgRules.json > /dev/null 2>&1; then
            # Get current branch name
            BRANCH_NAME=${GITHUB_REF#refs/heads/}
            # Get allowed branches from pkgRules.json
            ALLOWED_BRANCHES=$(jq -r '.branches[]' .github/configs/pkgRules.json)
            # Check if current branch matches any allowed pattern
            ALLOWED=false
            for pattern in $ALLOWED_BRANCHES; do
              if [[ "$BRANCH_NAME" =~ ^${pattern//\*/.*}$ ]]; then
                ALLOWED=true
                break
              fi
            done
            if [ "$ALLOWED" = false ]; then
              echo "Branch $BRANCH_NAME is not in allowed branches list. Exiting."
              exit 0
            fi
          else
            # If no branches field, only allow main branch
            if [ "$GITHUB_REF" != "refs/heads/main" ]; then
              echo "No branches specified in pkgRules.json. Only main branch is allowed. Exiting."
              exit 0
            fi
          fi
        else
          # If no pkgRules.json, only allow main branch
          if [ "$GITHUB_REF" != "refs/heads/main" ]; then
            echo "No pkgRules.json found. Only main branch is allowed. Exiting."
            exit 0
          fi
        fi

    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'

    - name: Install zip
      run: sudo apt-get install zip

    - name: Read manifest.json
      id: read_manifest
      run: |
        # First check if name contains localization markers
        raw_name=$(jq -r '.name' ${{ env.PATH_TO_PACKAGE }}/manifest.json)
        if [[ "$raw_name" == *"{{"* ]]; then
          # If name is localized, get it from _locales/en.json
          manifest_name=$(jq -r '.manifest.app.name' ${{ env.PATH_TO_PACKAGE }}/_locales/en.json)
          echo "Using localized name from ${{ env.PATH_TO_PACKAGE }}/_locales/en.json"
        else
          # Otherwise use the raw name from manifest.json
          manifest_name=$raw_name
        fi
        # Get version as before
        manifest_version=$(jq -r '.version' ${{ env.PATH_TO_PACKAGE }}/manifest.json)
        # Set environment variables
        echo "MANIFEST_NAME=$manifest_name" >> $GITHUB_ENV
        echo "MANIFEST_VERSION=$manifest_version" >> $GITHUB_ENV

    - name: Check if release exists
      id: check_release
      run: |
        release_id=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.MANIFEST_VERSION }}" | jq -r '.id')
        if [ "$release_id" != "null" ]; then
          echo "Release already exists. Exiting."
          exit 0
        fi

    - name: Process manifests and create zips
      id: process_manifests
      run: |
        # Store original manifest
        cp manifest.json manifest.json.bak
        
        # Process production manifest
        PROD_RESULT=$(node .github/scripts/process-manifest.cjs false)
        PROD_TYPE=$(echo $PROD_RESULT | jq -r '.type')
        PROD_ZIP=$(node .github/scripts/create-zip.cjs $PROD_TYPE)
        echo "PROD_ZIP=$PROD_ZIP" >> $GITHUB_ENV
        
        # Restore original manifest
        cp manifest.json.bak manifest.json
        
        # Process debug manifest
        DEBUG_RESULT=$(node .github/scripts/process-manifest.cjs true)
        DEBUG_TYPE=$(echo $DEBUG_RESULT | jq -r '.type')
        DEBUG_ZIP=$(node .github/scripts/create-zip.cjs $DEBUG_TYPE)
        echo "DEBUG_ZIP=$DEBUG_ZIP" >> $GITHUB_ENV
        
        # Restore original manifest
        cp manifest.json.bak manifest.json

    - name: Create Release
      uses: softprops/action-gh-release@v1
      if: github.event_name != 'pull_request'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.MANIFEST_VERSION }}
        name: v${{ env.MANIFEST_VERSION }}
        files: |
          ${{ env.PROD_ZIP }}
          ${{ env.DEBUG_ZIP }}
        draft: false
        prerelease: false 