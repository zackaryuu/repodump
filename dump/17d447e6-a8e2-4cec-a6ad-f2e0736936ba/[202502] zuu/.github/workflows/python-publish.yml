name: Upload Python Package

on:
  push:
    paths:
      - 'pyproject.toml'
  workflow_dispatch:  # Allow manual dispatch
    inputs:
      check_version:
        description: 'Check version logic'
        required: false
        default: 'false'  # Default to true

jobs:
  release-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Determine Version Check Logic
        id: determine_check
        run: |
          # Determine if we should check the version
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ "${{ github.event.inputs.check_version }}" == "false" ]; then
            echo "check_version=false" >> $GITHUB_ENV
          else
            echo "check_version=true" >> $GITHUB_ENV
          fi

      - name: Check Minor Version Change
        id: check_version
        run: |
          # Get the current version from pyproject.toml
          current_version=$(grep 'version =' pyproject.toml | cut -d '"' -f 2)
          echo "Current version: $current_version"

          # Read the last run version from the LAST_VERSION file
          if [ -f .github/LAST_VERSION ]; then
            last_version=$(cat .github/LAST_VERSION)
          else
            last_version=""
          fi
          echo "Last version: $last_version"

          # Check if we should perform version checks
          if [ "$check_version" == "false" ]; then
            echo "Skipping version checks as per input."
            exit 0  # Skip the checks if version check is disabled
          fi

          # Check if both versions are set
          if [ -z "$current_version" ] || [ -z "$last_version" ]; then
            echo "One of the version variables is empty. Exiting."
            exit 1
          fi

          # Compare versions
          IFS='.' read -r -a current_parts <<< "$current_version"
          IFS='.' read -r -a last_parts <<< "$last_version"

          # Check if major versions are the same and minor version is the same or has changed
          if [ "${current_parts[0]}" -eq "${last_parts[0]}" ] && [ "${current_parts[1]}" -eq "${last_parts[1]}" ]; then
            echo "Major version is the same. Terminating workflow."
            exit 1
          fi

          # Store the current version in the LAST_VERSION file
          echo "$current_version" > .github/LAST_VERSION

      - name: Commit LAST_VERSION file
        if: ${{ env.check_version == 'true' }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add .github/LAST_VERSION
          git commit -m "Update LAST_VERSION to $current_version" || echo "No changes to commit"
          git push

      - name: build release distributions
        run: |
          # NOTE: put your own distribution build steps here.
          python -m pip install build
          python -m build

      - name: upload windows dists
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  pypi-publish:
    runs-on: ubuntu-latest
    needs:
      - release-build
    permissions:
      id-token: write

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1